<?php

namespace App\Kravanh\Application\Admin\Match;

use App\Kravanh\Application\Admin\Environment\Group;
use App\Kravanh\Application\Admin\Match\Actions\ExportTicketToExcelByMatchNovaAction;
use App\Kravanh\Application\Admin\Match\Filters\DateRange;
use App\Kravanh\Domain\Match\Models\BetRecord as BetRecordModel;
use App\Kravanh\Domain\Match\Supports\Enums\BetOn;
use App\Kravanh\Support\Enums\Currency;
use Illuminate\Http\Request;
use Laravel\Nova\Fields\BelongsTo;
use Laravel\Nova\Fields\ID;
use Laravel\Nova\Fields\Text;
use SimpleSquid\Nova\Fields\Enum\Enum;

class BetRecord extends MatchResourceGroup
{
    public static $with = ['user:id,name', 'group:id,name'];

    public static $model = BetRecordModel::class;
    public static $search = ['fight_number'];

    public static $perPageViaRelationship = 100;

    public static function availableForNavigation(Request $request): bool
    {
        return false;
    }

    public function fields(Request $request): array
    {
        return [
            ID::make('id'),
            BelongsTo::make('Group', 'group', Group::class),
            Text::make('Fight Number'),
            Text::make('ip')->resolveUsing(function ($ip) {
                return <<<HTML
                    <a href="https://ipinfo.io/$ip">$ip</a>
                HTML;
            })->asHtml(),
            Text::make('Time', 'bet_time')
                ->resolveUsing(fn($value) => $value->format(config('kravanh.date_time_format'))),
            Text::make('Member')->resolveUsing(fn() => $this->user->name),
            Enum::make('Bet', 'bet_on')->attach(BetOn::class)
                ->sortable(),
            Text::make('Currency', 'currency')
                ->sortable(),
            Text::make('Amount')->resolveUsing(function () {
                $currency = Currency::fromKey($this->currency);
                $amount = priceFormat(fromKHRtoCurrency($this->amount, $currency), $currency);
                $payout = priceFormat(fromKHRtoCurrency($this->payout, $currency), $currency);
                return $amount . ' x ' . $this->payout_rate . ' = ' . $payout;
            }),
            Text::make('Total Payout')->resolveUsing(function () {
                $currency = Currency::fromKey($this->currency);
                $amount = fromKHRtoCurrency($this->amount, $currency);
                $payout = fromKHRtoCurrency($this->payout, $currency);
                return priceFormat($amount + $payout, $currency);
            }),

        ];
    }

    public static function authorizedToCreate(Request $request): bool
    {
        return false;
    }

    public function authorizedToUpdate(Request $request): bool
    {
        return false;
    }

    public function authorizedToDelete(Request $request): bool
    {
        return false;
    }

    public static function indexQuery(Request $request, $query)
    {

        return $query->withoutLiveMatch();
        //return parent::indexQuery($request, $query); // TODO: Change the autogenerated stub
    }

    public function filters(Request $request): array
    {
        return [
            DateRange::make('bet_date'),
        ];
    }


    public function actions(Request $request): array
    {
        return [
            (new ExportTicketToExcelByMatchNovaAction)
                ->canSee(function ($request) {
                    return $request->user()->isCompany();
                })->canRun(function ($request) {
                    return $request->user()->isCompany();
                }),
        ];
    }
}
